{"problem_name": "numbertheory_3pow2pownm1mod2pownp3eq2pownp2", "category": "unknown", "metadata": {}, "informal_statement": "Show that for positive integer $n$, the remainder of $3^{2^n} - 1 \\equiv 2^{n+2} \\mod 2^{n+3}$.", "informal_proof": "We can prove this by induction on n. For the base case, $n=1$, when the result obviously holds.\nFor the inductive case, the hypothesis is $3^{2^n} - 1 \\equiv 2^{n+2} \\mod 2^{n+3}$, so we can obtain a natural number $p$ where $3^{2^n} - 1 = 2^{n+2} + p * 2^{n+3} = 2^{n+2}(1+2p)$.\nThen we have $3^{2^{n+1}} = 3^{2^n*2} = (3^{2^n})^2 = (2^{n+2} * (1+2p) + 1)^2$.\nHence $3^{2^{n+1}} \\equiv (2^{n+2} * (1+2p))^2 + 2 * 2^{n+2} * (1+2p) + 1 \\equiv 2^{n+3}*(1+2p) + 1 \\equiv 1\\mod 2^{n+3}$.\nTherefore $3^{2^{n+1}} -1 \\equiv 0 \\mod 2^{n+3}$. By induction, the statement holds true.", "formal_statement": "theorem numbertheory_3pow2pownm1mod2pownp3eq2pownp2:\n  fixes n :: nat\n  assumes \"0 < n\" \n  shows \"(3^(2^n) - 1) mod (2^(n + 3)) = (2::nat)^(n + 2)\"", "formal_code": "(*\n  Authors: Wenda Li\n*)\n\ntheory numbertheory_3pow2pownm1mod2pownp3eq2pownp2 \n  imports Complex_Main \"HOL-Computational_Algebra.Computational_Algebra\"\n  \"HOL-Number_Theory.Number_Theory\"\nbegin\n\ntheorem numbertheory_3pow2pownm1mod2pownp3eq2pownp2:\n  fixes n :: nat\n  assumes \"0 < n\" \n  shows \"(3^(2^n) - 1) mod (2^(n + 3)) = (2::nat)^(n + 2)\"\n  using assms\nproof (induct n)\n  case (Suc n)\n  have ?case when \"n=0\" \n    using that by simp\n  moreover have ?case when \"n>0\"\n  proof -\n    define m::nat where \"m = 2^n\"\n    have \"(3 ^ 2 ^ n - 1) mod 2 ^ (n + 3) = (2::nat)^ (n + 2)\"\n      using Suc(1) that by simp\n    then have \"(3^m - 1) mod (8*m) = 4*m\"\n      unfolding m_def by (auto simp:algebra_simps power_add) \n    then obtain k where k0:\"3^m - 1 = (8*m)*k + 4*m\" \n      by (metis mult_div_mod_eq)\n    define M::nat where \"M = 4*m*k^2+m+4*m*k+k\"\n\n    have k:\"3^m = (8*m)*k + 4*m +1\" \n    proof -\n      have \"3^m\\<ge>(1::nat)\" by auto\n      then show ?thesis\n        using k0 by linarith\n    qed\n    have \"3 ^ 2 ^ Suc n - 1 = ((3::nat) ^ (m*2)) - 1\"\n      unfolding m_def by (auto simp:algebra_simps)\n    also have \"... = (3 ^ m)\\<^sup>2 - 1\"\n      unfolding power_mult by simp\n    also have \"... = ((8*m)*k + 4*m +1)^2 -1 \"\n      unfolding k by simp\n    also have \"... = (16*m)*M + 8*m\"\n      unfolding M_def by (auto simp:algebra_simps power2_eq_square)\n    finally have \"3 ^ 2 ^ Suc n - 1 = (16*m)*M + 8*m\" .\n    moreover have \"((16*m)*M + 8*m) mod (16*m) = 8*m\"\n      by simp\n    then have \"((16*m)*M + 8*m) mod 2 ^ (Suc n + 3) = 2 ^ (Suc n + 2)\"\n      unfolding m_def by (auto simp:algebra_simps power_add)\n    ultimately show ?thesis by auto\n  qed\n  ultimately show ?case by blast\nqed simp\n\nend   "}