## Problems
Show that for any positive integer $n$, we have $3^{2^n} - 1 \equiv 2^{n+2} \pmod{2^{n+3}}$.

## Informal proof
We prove by induction on n. The base case is trivial. Inductive case: when n is 0 it is also trivial. When $n>0$, let $m=2^n$, and we have $3^m - 1 \equiv 4*m \pmod{8*m}$. Then there is $k$ where $3^m - 1 = (8*m)*k + 4*m$. Let $M = 4*m*k^2+m+4*m*k+k$, and we have $3^{2^{m+1}}-1 = 3^{m*2} - 1 = (3^m)^2-1 = ((8*m)*k + 4*m+1)^2 - 1 = (16*m)*M + 8*m$ Hence $3^{2^{m+1}}-1 \equiv 8*m \pmod{16*m}$, which unfolds to $(16*m)*M + 8*m \equiv 8*m \pmod{16*m}$. Therefore the inductive case holds. Q.E.D.

## Formal statement
```isabelle
theorem numbertheory_3pow2pownm1mod2pownp3eq2pownp2:
  fixes n :: nat
  assumes "0 < n" 
  shows "(3^(2^n) - 1) mod (2^(n + 3)) = (2::nat)^(n + 2)"
```

## Proof
theory numbertheory_3pow2pownm1mod2pownp3eq2pownp2
import Complex_Main
begin

(* no helper function required in this theorem *)

(* formal statement copy from the input *)
theorem numbertheory_3pow2pownm1mod2pownp3eq2pownp2:
  fixes n :: nat
  assumes "0 < n" 
  shows "(3^(2^n) - 1) mod (2^(n + 3)) = (2::nat)^(n + 2)"
  using assms
proof (induct n)
  case (Suc n)
  have ?case when "n=0" 
    using that sledgehammer
  moreover have ?case when "n>0"
  proof -
    define m::nat where "m = 2^n"
    have "(3 ^ 2 ^ n - 1) mod 2 ^ (n + 3) = (2::nat)^ (n + 2)"
      using Suc(1) that sledgehammer
    then have "(3^m - 1) mod (8*m) = 4*m"
      unfolding m_def
      sledgehammer
    then obtain k where k0:"3^m - 1 = (8*m)*k + 4*m" 
      sledgehammer
    define M::nat where "M = 4*m*k^2+m+4*m*k+k"
    have k: "3^m = (8*m)*k + 4*m +1" 
    proof -
      have "3^m\<ge>(1::nat)" sledgehammer
      then show ?thesis
        using k0 sledgehammer
    qed
    have "3 ^ 2 ^ Suc n - 1 = ((3::nat) ^ (m*2)) - 1"
      unfolding m_def sledgehammer
    also have "... = (3 ^ m)\<^sup>2 - 1"
      unfolding power_mult sledgehammer
    also have "... = ((8*m)*k + 4*m +1)^2 -1 "
      unfolding k sledgehammer
    also have "... = (16*m)*M + 8*m"
      unfolding M_def sledgehammer
    finally have "3 ^ 2 ^ Suc n - 1 = (16*m)*M + 8*m" .
    moreover have "((16*m)*M + 8*m) mod (16*m) = 8*m"
      sledgehammer
    then have "((16*m)*M + 8*m) mod 2 ^ (Suc n + 3) = 2 ^ (Suc n + 2)"
      unfolding m_def sledgehammer
    ultimately show ?thesis sledgehammer
  qed
  ultimately show ?case sledgehammer
qed

end
```

